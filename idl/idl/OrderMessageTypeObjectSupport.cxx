// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OrderMessageTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "OrderMessageTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>
#include "OrderMessage.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_OrderSide_type_identifier(
        TypeIdentifierPair& type_ids_OrderSide)
{
    ReturnCode_t return_code_OrderSide {eprosima::fastdds::dds::RETCODE_OK};
    return_code_OrderSide =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "OrderSide", type_ids_OrderSide);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrderSide)
    {
        EnumTypeFlag enum_flags_OrderSide = 0;
        BitBound bit_bound_OrderSide = 32;
        CommonEnumeratedHeader common_OrderSide = TypeObjectUtils::build_common_enumerated_header(bit_bound_OrderSide);
        QualifiedTypeName type_name_OrderSide = "OrderSide";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OrderSide;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OrderSide;
        CompleteTypeDetail detail_OrderSide = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OrderSide, ann_custom_OrderSide, type_name_OrderSide.to_string());
        CompleteEnumeratedHeader header_OrderSide = TypeObjectUtils::build_complete_enumerated_header(common_OrderSide, detail_OrderSide);
        CompleteEnumeratedLiteralSeq literal_seq_OrderSide;
        {
            EnumeratedLiteralFlag flags_BUY = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_BUY = TypeObjectUtils::build_common_enumerated_literal(0, flags_BUY);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_BUY;
            ann_custom_OrderSide.reset();
            MemberName name_BUY = "BUY";
            CompleteMemberDetail detail_BUY = TypeObjectUtils::build_complete_member_detail(name_BUY, member_ann_builtin_BUY, ann_custom_OrderSide);
            CompleteEnumeratedLiteral literal_BUY = TypeObjectUtils::build_complete_enumerated_literal(common_BUY, detail_BUY);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderSide, literal_BUY);
        }
        {
            EnumeratedLiteralFlag flags_SELL = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_SELL = TypeObjectUtils::build_common_enumerated_literal(1, flags_SELL);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_SELL;
            ann_custom_OrderSide.reset();
            MemberName name_SELL = "SELL";
            CompleteMemberDetail detail_SELL = TypeObjectUtils::build_complete_member_detail(name_SELL, member_ann_builtin_SELL, ann_custom_OrderSide);
            CompleteEnumeratedLiteral literal_SELL = TypeObjectUtils::build_complete_enumerated_literal(common_SELL, detail_SELL);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderSide, literal_SELL);
        }
        CompleteEnumeratedType enumerated_type_OrderSide = TypeObjectUtils::build_complete_enumerated_type(enum_flags_OrderSide, header_OrderSide,
                literal_seq_OrderSide);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_OrderSide, type_name_OrderSide.to_string(), type_ids_OrderSide))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "OrderSide already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_OrderType_type_identifier(
        TypeIdentifierPair& type_ids_OrderType)
{
    ReturnCode_t return_code_OrderType {eprosima::fastdds::dds::RETCODE_OK};
    return_code_OrderType =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "OrderType", type_ids_OrderType);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrderType)
    {
        EnumTypeFlag enum_flags_OrderType = 0;
        BitBound bit_bound_OrderType = 32;
        CommonEnumeratedHeader common_OrderType = TypeObjectUtils::build_common_enumerated_header(bit_bound_OrderType);
        QualifiedTypeName type_name_OrderType = "OrderType";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OrderType;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OrderType;
        CompleteTypeDetail detail_OrderType = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OrderType, ann_custom_OrderType, type_name_OrderType.to_string());
        CompleteEnumeratedHeader header_OrderType = TypeObjectUtils::build_complete_enumerated_header(common_OrderType, detail_OrderType);
        CompleteEnumeratedLiteralSeq literal_seq_OrderType;
        {
            EnumeratedLiteralFlag flags_MARKET = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_MARKET = TypeObjectUtils::build_common_enumerated_literal(0, flags_MARKET);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MARKET;
            ann_custom_OrderType.reset();
            MemberName name_MARKET = "MARKET";
            CompleteMemberDetail detail_MARKET = TypeObjectUtils::build_complete_member_detail(name_MARKET, member_ann_builtin_MARKET, ann_custom_OrderType);
            CompleteEnumeratedLiteral literal_MARKET = TypeObjectUtils::build_complete_enumerated_literal(common_MARKET, detail_MARKET);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderType, literal_MARKET);
        }
        {
            EnumeratedLiteralFlag flags_LIMIT = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_LIMIT = TypeObjectUtils::build_common_enumerated_literal(1, flags_LIMIT);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_LIMIT;
            ann_custom_OrderType.reset();
            MemberName name_LIMIT = "LIMIT";
            CompleteMemberDetail detail_LIMIT = TypeObjectUtils::build_complete_member_detail(name_LIMIT, member_ann_builtin_LIMIT, ann_custom_OrderType);
            CompleteEnumeratedLiteral literal_LIMIT = TypeObjectUtils::build_complete_enumerated_literal(common_LIMIT, detail_LIMIT);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderType, literal_LIMIT);
        }
        {
            EnumeratedLiteralFlag flags_STOP = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_STOP = TypeObjectUtils::build_common_enumerated_literal(2, flags_STOP);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_STOP;
            ann_custom_OrderType.reset();
            MemberName name_STOP = "STOP";
            CompleteMemberDetail detail_STOP = TypeObjectUtils::build_complete_member_detail(name_STOP, member_ann_builtin_STOP, ann_custom_OrderType);
            CompleteEnumeratedLiteral literal_STOP = TypeObjectUtils::build_complete_enumerated_literal(common_STOP, detail_STOP);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderType, literal_STOP);
        }
        {
            EnumeratedLiteralFlag flags_STOP_LIMIT = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_STOP_LIMIT = TypeObjectUtils::build_common_enumerated_literal(3, flags_STOP_LIMIT);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_STOP_LIMIT;
            ann_custom_OrderType.reset();
            MemberName name_STOP_LIMIT = "STOP_LIMIT";
            CompleteMemberDetail detail_STOP_LIMIT = TypeObjectUtils::build_complete_member_detail(name_STOP_LIMIT, member_ann_builtin_STOP_LIMIT, ann_custom_OrderType);
            CompleteEnumeratedLiteral literal_STOP_LIMIT = TypeObjectUtils::build_complete_enumerated_literal(common_STOP_LIMIT, detail_STOP_LIMIT);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderType, literal_STOP_LIMIT);
        }
        CompleteEnumeratedType enumerated_type_OrderType = TypeObjectUtils::build_complete_enumerated_type(enum_flags_OrderType, header_OrderType,
                literal_seq_OrderType);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_OrderType, type_name_OrderType.to_string(), type_ids_OrderType))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "OrderType already registered in TypeObjectRegistry for a different type.");
        }
    }
}void register_OrderStatus_type_identifier(
        TypeIdentifierPair& type_ids_OrderStatus)
{
    ReturnCode_t return_code_OrderStatus {eprosima::fastdds::dds::RETCODE_OK};
    return_code_OrderStatus =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "OrderStatus", type_ids_OrderStatus);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrderStatus)
    {
        EnumTypeFlag enum_flags_OrderStatus = 0;
        BitBound bit_bound_OrderStatus = 32;
        CommonEnumeratedHeader common_OrderStatus = TypeObjectUtils::build_common_enumerated_header(bit_bound_OrderStatus);
        QualifiedTypeName type_name_OrderStatus = "OrderStatus";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OrderStatus;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OrderStatus;
        CompleteTypeDetail detail_OrderStatus = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OrderStatus, ann_custom_OrderStatus, type_name_OrderStatus.to_string());
        CompleteEnumeratedHeader header_OrderStatus = TypeObjectUtils::build_complete_enumerated_header(common_OrderStatus, detail_OrderStatus);
        CompleteEnumeratedLiteralSeq literal_seq_OrderStatus;
        {
            EnumeratedLiteralFlag flags_NEW = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_NEW = TypeObjectUtils::build_common_enumerated_literal(0, flags_NEW);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_NEW;
            ann_custom_OrderStatus.reset();
            MemberName name_NEW = "NEW";
            CompleteMemberDetail detail_NEW = TypeObjectUtils::build_complete_member_detail(name_NEW, member_ann_builtin_NEW, ann_custom_OrderStatus);
            CompleteEnumeratedLiteral literal_NEW = TypeObjectUtils::build_complete_enumerated_literal(common_NEW, detail_NEW);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderStatus, literal_NEW);
        }
        {
            EnumeratedLiteralFlag flags_VALIDATED = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_VALIDATED = TypeObjectUtils::build_common_enumerated_literal(1, flags_VALIDATED);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_VALIDATED;
            ann_custom_OrderStatus.reset();
            MemberName name_VALIDATED = "VALIDATED";
            CompleteMemberDetail detail_VALIDATED = TypeObjectUtils::build_complete_member_detail(name_VALIDATED, member_ann_builtin_VALIDATED, ann_custom_OrderStatus);
            CompleteEnumeratedLiteral literal_VALIDATED = TypeObjectUtils::build_complete_enumerated_literal(common_VALIDATED, detail_VALIDATED);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderStatus, literal_VALIDATED);
        }
        {
            EnumeratedLiteralFlag flags_REJECTED = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_REJECTED = TypeObjectUtils::build_common_enumerated_literal(2, flags_REJECTED);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_REJECTED;
            ann_custom_OrderStatus.reset();
            MemberName name_REJECTED = "REJECTED";
            CompleteMemberDetail detail_REJECTED = TypeObjectUtils::build_complete_member_detail(name_REJECTED, member_ann_builtin_REJECTED, ann_custom_OrderStatus);
            CompleteEnumeratedLiteral literal_REJECTED = TypeObjectUtils::build_complete_enumerated_literal(common_REJECTED, detail_REJECTED);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderStatus, literal_REJECTED);
        }
        {
            EnumeratedLiteralFlag flags_ROUTED = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_ROUTED = TypeObjectUtils::build_common_enumerated_literal(3, flags_ROUTED);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ROUTED;
            ann_custom_OrderStatus.reset();
            MemberName name_ROUTED = "ROUTED";
            CompleteMemberDetail detail_ROUTED = TypeObjectUtils::build_complete_member_detail(name_ROUTED, member_ann_builtin_ROUTED, ann_custom_OrderStatus);
            CompleteEnumeratedLiteral literal_ROUTED = TypeObjectUtils::build_complete_enumerated_literal(common_ROUTED, detail_ROUTED);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderStatus, literal_ROUTED);
        }
        {
            EnumeratedLiteralFlag flags_FILLED = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_FILLED = TypeObjectUtils::build_common_enumerated_literal(4, flags_FILLED);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_FILLED;
            ann_custom_OrderStatus.reset();
            MemberName name_FILLED = "FILLED";
            CompleteMemberDetail detail_FILLED = TypeObjectUtils::build_complete_member_detail(name_FILLED, member_ann_builtin_FILLED, ann_custom_OrderStatus);
            CompleteEnumeratedLiteral literal_FILLED = TypeObjectUtils::build_complete_enumerated_literal(common_FILLED, detail_FILLED);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderStatus, literal_FILLED);
        }
        {
            EnumeratedLiteralFlag flags_CANCELLED = TypeObjectUtils::build_enumerated_literal_flag(false);
            CommonEnumeratedLiteral common_CANCELLED = TypeObjectUtils::build_common_enumerated_literal(5, flags_CANCELLED);
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_CANCELLED;
            ann_custom_OrderStatus.reset();
            MemberName name_CANCELLED = "CANCELLED";
            CompleteMemberDetail detail_CANCELLED = TypeObjectUtils::build_complete_member_detail(name_CANCELLED, member_ann_builtin_CANCELLED, ann_custom_OrderStatus);
            CompleteEnumeratedLiteral literal_CANCELLED = TypeObjectUtils::build_complete_enumerated_literal(common_CANCELLED, detail_CANCELLED);
            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_OrderStatus, literal_CANCELLED);
        }
        CompleteEnumeratedType enumerated_type_OrderStatus = TypeObjectUtils::build_complete_enumerated_type(enum_flags_OrderStatus, header_OrderStatus,
                literal_seq_OrderStatus);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_OrderStatus, type_name_OrderStatus.to_string(), type_ids_OrderStatus))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "OrderStatus already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_OrderRequest_type_identifier(
        TypeIdentifierPair& type_ids_OrderRequest)
{

    ReturnCode_t return_code_OrderRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_OrderRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "OrderRequest", type_ids_OrderRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrderRequest)
    {
        StructTypeFlag struct_flags_OrderRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_OrderRequest = "OrderRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OrderRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OrderRequest;
        CompleteTypeDetail detail_OrderRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OrderRequest, ann_custom_OrderRequest, type_name_OrderRequest.to_string());
        CompleteStructHeader header_OrderRequest;
        header_OrderRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_OrderRequest);
        CompleteStructMemberSeq member_seq_OrderRequest;
        {
            TypeIdentifierPair type_ids_client_id;
            ReturnCode_t return_code_client_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_client_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_client_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_client_id)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_client_id))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_client_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_client_id = 0x00000000;
            bool common_client_id_ec {false};
            CommonStructMember common_client_id {TypeObjectUtils::build_common_struct_member(member_id_client_id, member_flags_client_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_client_id, common_client_id_ec))};
            if (!common_client_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure client_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_client_id = "client_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_client_id;
            ann_custom_OrderRequest.reset();
            CompleteMemberDetail detail_client_id = TypeObjectUtils::build_complete_member_detail(name_client_id, member_ann_builtin_client_id, ann_custom_OrderRequest);
            CompleteStructMember member_client_id = TypeObjectUtils::build_complete_struct_member(common_client_id, detail_client_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderRequest, member_client_id);
        }
        {
            TypeIdentifierPair type_ids_order_id;
            ReturnCode_t return_code_order_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_order_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_order_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_order_id)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_order_id))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_order_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_order_id = 0x00000001;
            bool common_order_id_ec {false};
            CommonStructMember common_order_id {TypeObjectUtils::build_common_struct_member(member_id_order_id, member_flags_order_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_order_id, common_order_id_ec))};
            if (!common_order_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure order_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_order_id = "order_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_order_id;
            ann_custom_OrderRequest.reset();
            CompleteMemberDetail detail_order_id = TypeObjectUtils::build_complete_member_detail(name_order_id, member_ann_builtin_order_id, ann_custom_OrderRequest);
            CompleteStructMember member_order_id = TypeObjectUtils::build_complete_struct_member(common_order_id, detail_order_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderRequest, member_order_id);
        }
        {
            TypeIdentifierPair type_ids_symbol;
            ReturnCode_t return_code_symbol {eprosima::fastdds::dds::RETCODE_OK};
            return_code_symbol =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_symbol);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_symbol)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_symbol))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_symbol = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_symbol = 0x00000002;
            bool common_symbol_ec {false};
            CommonStructMember common_symbol {TypeObjectUtils::build_common_struct_member(member_id_symbol, member_flags_symbol, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_symbol, common_symbol_ec))};
            if (!common_symbol_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure symbol member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_symbol = "symbol";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_symbol;
            ann_custom_OrderRequest.reset();
            CompleteMemberDetail detail_symbol = TypeObjectUtils::build_complete_member_detail(name_symbol, member_ann_builtin_symbol, ann_custom_OrderRequest);
            CompleteStructMember member_symbol = TypeObjectUtils::build_complete_struct_member(common_symbol, detail_symbol);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderRequest, member_symbol);
        }
        {
            TypeIdentifierPair type_ids_side;
            ReturnCode_t return_code_side {eprosima::fastdds::dds::RETCODE_OK};
            return_code_side =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "OrderSide", type_ids_side);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_side)
            {
            ::register_OrderSide_type_identifier(type_ids_side);
            }
            StructMemberFlag member_flags_side = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_side = 0x00000003;
            bool common_side_ec {false};
            CommonStructMember common_side {TypeObjectUtils::build_common_struct_member(member_id_side, member_flags_side, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_side, common_side_ec))};
            if (!common_side_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure side member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_side = "side";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_side;
            ann_custom_OrderRequest.reset();
            CompleteMemberDetail detail_side = TypeObjectUtils::build_complete_member_detail(name_side, member_ann_builtin_side, ann_custom_OrderRequest);
            CompleteStructMember member_side = TypeObjectUtils::build_complete_struct_member(common_side, detail_side);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderRequest, member_side);
        }
        {
            TypeIdentifierPair type_ids_type;
            ReturnCode_t return_code_type {eprosima::fastdds::dds::RETCODE_OK};
            return_code_type =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "OrderType", type_ids_type);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_type)
            {
            ::register_OrderType_type_identifier(type_ids_type);
            }
            StructMemberFlag member_flags_type = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_type = 0x00000004;
            bool common_type_ec {false};
            CommonStructMember common_type {TypeObjectUtils::build_common_struct_member(member_id_type, member_flags_type, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_type, common_type_ec))};
            if (!common_type_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure type member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_type = "type";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_type;
            ann_custom_OrderRequest.reset();
            CompleteMemberDetail detail_type = TypeObjectUtils::build_complete_member_detail(name_type, member_ann_builtin_type, ann_custom_OrderRequest);
            CompleteStructMember member_type = TypeObjectUtils::build_complete_struct_member(common_type, detail_type);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderRequest, member_type);
        }
        {
            TypeIdentifierPair type_ids_quantity;
            ReturnCode_t return_code_quantity {eprosima::fastdds::dds::RETCODE_OK};
            return_code_quantity =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_quantity);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_quantity)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "quantity Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_quantity = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_quantity = 0x00000005;
            bool common_quantity_ec {false};
            CommonStructMember common_quantity {TypeObjectUtils::build_common_struct_member(member_id_quantity, member_flags_quantity, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_quantity, common_quantity_ec))};
            if (!common_quantity_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure quantity member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_quantity = "quantity";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_quantity;
            ann_custom_OrderRequest.reset();
            CompleteMemberDetail detail_quantity = TypeObjectUtils::build_complete_member_detail(name_quantity, member_ann_builtin_quantity, ann_custom_OrderRequest);
            CompleteStructMember member_quantity = TypeObjectUtils::build_complete_struct_member(common_quantity, detail_quantity);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderRequest, member_quantity);
        }
        {
            TypeIdentifierPair type_ids_price;
            ReturnCode_t return_code_price {eprosima::fastdds::dds::RETCODE_OK};
            return_code_price =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_price);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_price)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "price Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_price = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_price = 0x00000006;
            bool common_price_ec {false};
            CommonStructMember common_price {TypeObjectUtils::build_common_struct_member(member_id_price, member_flags_price, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_price, common_price_ec))};
            if (!common_price_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure price member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_price = "price";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_price;
            ann_custom_OrderRequest.reset();
            CompleteMemberDetail detail_price = TypeObjectUtils::build_complete_member_detail(name_price, member_ann_builtin_price, ann_custom_OrderRequest);
            CompleteStructMember member_price = TypeObjectUtils::build_complete_struct_member(common_price, detail_price);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderRequest, member_price);
        }
        {
            TypeIdentifierPair type_ids_stop_price;
            ReturnCode_t return_code_stop_price {eprosima::fastdds::dds::RETCODE_OK};
            return_code_stop_price =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_stop_price);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_stop_price)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "stop_price Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_stop_price = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_stop_price = 0x00000007;
            bool common_stop_price_ec {false};
            CommonStructMember common_stop_price {TypeObjectUtils::build_common_struct_member(member_id_stop_price, member_flags_stop_price, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_stop_price, common_stop_price_ec))};
            if (!common_stop_price_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure stop_price member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_stop_price = "stop_price";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_stop_price;
            ann_custom_OrderRequest.reset();
            CompleteMemberDetail detail_stop_price = TypeObjectUtils::build_complete_member_detail(name_stop_price, member_ann_builtin_stop_price, ann_custom_OrderRequest);
            CompleteStructMember member_stop_price = TypeObjectUtils::build_complete_struct_member(common_stop_price, detail_stop_price);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderRequest, member_stop_price);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000008;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_OrderRequest.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_OrderRequest);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderRequest, member_timestamp);
        }
        {
            TypeIdentifierPair type_ids_user_id;
            ReturnCode_t return_code_user_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_user_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_user_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_user_id)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_user_id))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_user_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_user_id = 0x00000009;
            bool common_user_id_ec {false};
            CommonStructMember common_user_id {TypeObjectUtils::build_common_struct_member(member_id_user_id, member_flags_user_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_user_id, common_user_id_ec))};
            if (!common_user_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure user_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_user_id = "user_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_user_id;
            ann_custom_OrderRequest.reset();
            CompleteMemberDetail detail_user_id = TypeObjectUtils::build_complete_member_detail(name_user_id, member_ann_builtin_user_id, ann_custom_OrderRequest);
            CompleteStructMember member_user_id = TypeObjectUtils::build_complete_struct_member(common_user_id, detail_user_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderRequest, member_user_id);
        }
        CompleteStructType struct_type_OrderRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_OrderRequest, header_OrderRequest, member_seq_OrderRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_OrderRequest, type_name_OrderRequest.to_string(), type_ids_OrderRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "OrderRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_OrderResponse_type_identifier(
        TypeIdentifierPair& type_ids_OrderResponse)
{

    ReturnCode_t return_code_OrderResponse {eprosima::fastdds::dds::RETCODE_OK};
    return_code_OrderResponse =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "OrderResponse", type_ids_OrderResponse);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrderResponse)
    {
        StructTypeFlag struct_flags_OrderResponse = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_OrderResponse = "OrderResponse";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OrderResponse;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OrderResponse;
        CompleteTypeDetail detail_OrderResponse = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OrderResponse, ann_custom_OrderResponse, type_name_OrderResponse.to_string());
        CompleteStructHeader header_OrderResponse;
        header_OrderResponse = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_OrderResponse);
        CompleteStructMemberSeq member_seq_OrderResponse;
        {
            TypeIdentifierPair type_ids_order_id;
            ReturnCode_t return_code_order_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_order_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_order_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_order_id)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_order_id))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_order_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_order_id = 0x00000000;
            bool common_order_id_ec {false};
            CommonStructMember common_order_id {TypeObjectUtils::build_common_struct_member(member_id_order_id, member_flags_order_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_order_id, common_order_id_ec))};
            if (!common_order_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure order_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_order_id = "order_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_order_id;
            ann_custom_OrderResponse.reset();
            CompleteMemberDetail detail_order_id = TypeObjectUtils::build_complete_member_detail(name_order_id, member_ann_builtin_order_id, ann_custom_OrderResponse);
            CompleteStructMember member_order_id = TypeObjectUtils::build_complete_struct_member(common_order_id, detail_order_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderResponse, member_order_id);
        }
        {
            TypeIdentifierPair type_ids_status;
            ReturnCode_t return_code_status {eprosima::fastdds::dds::RETCODE_OK};
            return_code_status =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "OrderStatus", type_ids_status);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_status)
            {
            ::register_OrderStatus_type_identifier(type_ids_status);
            }
            StructMemberFlag member_flags_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_status = 0x00000001;
            bool common_status_ec {false};
            CommonStructMember common_status {TypeObjectUtils::build_common_struct_member(member_id_status, member_flags_status, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_status, common_status_ec))};
            if (!common_status_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_status = "status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_status;
            ann_custom_OrderResponse.reset();
            CompleteMemberDetail detail_status = TypeObjectUtils::build_complete_member_detail(name_status, member_ann_builtin_status, ann_custom_OrderResponse);
            CompleteStructMember member_status = TypeObjectUtils::build_complete_struct_member(common_status, detail_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderResponse, member_status);
        }
        {
            TypeIdentifierPair type_ids_message;
            ReturnCode_t return_code_message {eprosima::fastdds::dds::RETCODE_OK};
            return_code_message =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_message);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_message)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_message))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_message = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_message = 0x00000002;
            bool common_message_ec {false};
            CommonStructMember common_message {TypeObjectUtils::build_common_struct_member(member_id_message, member_flags_message, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_message, common_message_ec))};
            if (!common_message_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure message member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_message = "message";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_message;
            ann_custom_OrderResponse.reset();
            CompleteMemberDetail detail_message = TypeObjectUtils::build_complete_member_detail(name_message, member_ann_builtin_message, ann_custom_OrderResponse);
            CompleteStructMember member_message = TypeObjectUtils::build_complete_struct_member(common_message, detail_message);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderResponse, member_message);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000003;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_OrderResponse.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_OrderResponse);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_OrderResponse, member_timestamp);
        }
        CompleteStructType struct_type_OrderResponse = TypeObjectUtils::build_complete_struct_type(struct_flags_OrderResponse, header_OrderResponse, member_seq_OrderResponse);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_OrderResponse, type_name_OrderResponse.to_string(), type_ids_OrderResponse))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "OrderResponse already registered in TypeObjectRegistry for a different type.");
        }
    }
}// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_RiskParameters_type_identifier(
        TypeIdentifierPair& type_ids_RiskParameters)
{

    ReturnCode_t return_code_RiskParameters {eprosima::fastdds::dds::RETCODE_OK};
    return_code_RiskParameters =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "RiskParameters", type_ids_RiskParameters);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_RiskParameters)
    {
        StructTypeFlag struct_flags_RiskParameters = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_RiskParameters = "RiskParameters";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_RiskParameters;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_RiskParameters;
        CompleteTypeDetail detail_RiskParameters = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_RiskParameters, ann_custom_RiskParameters, type_name_RiskParameters.to_string());
        CompleteStructHeader header_RiskParameters;
        header_RiskParameters = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_RiskParameters);
        CompleteStructMemberSeq member_seq_RiskParameters;
        {
            TypeIdentifierPair type_ids_max_position_size;
            ReturnCode_t return_code_max_position_size {eprosima::fastdds::dds::RETCODE_OK};
            return_code_max_position_size =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_max_position_size);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_max_position_size)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "max_position_size Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_max_position_size = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_max_position_size = 0x00000000;
            bool common_max_position_size_ec {false};
            CommonStructMember common_max_position_size {TypeObjectUtils::build_common_struct_member(member_id_max_position_size, member_flags_max_position_size, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_max_position_size, common_max_position_size_ec))};
            if (!common_max_position_size_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure max_position_size member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_max_position_size = "max_position_size";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_max_position_size;
            ann_custom_RiskParameters.reset();
            CompleteMemberDetail detail_max_position_size = TypeObjectUtils::build_complete_member_detail(name_max_position_size, member_ann_builtin_max_position_size, ann_custom_RiskParameters);
            CompleteStructMember member_max_position_size = TypeObjectUtils::build_complete_struct_member(common_max_position_size, detail_max_position_size);
            TypeObjectUtils::add_complete_struct_member(member_seq_RiskParameters, member_max_position_size);
        }
        {
            TypeIdentifierPair type_ids_max_daily_volume;
            ReturnCode_t return_code_max_daily_volume {eprosima::fastdds::dds::RETCODE_OK};
            return_code_max_daily_volume =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_max_daily_volume);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_max_daily_volume)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "max_daily_volume Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_max_daily_volume = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_max_daily_volume = 0x00000001;
            bool common_max_daily_volume_ec {false};
            CommonStructMember common_max_daily_volume {TypeObjectUtils::build_common_struct_member(member_id_max_daily_volume, member_flags_max_daily_volume, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_max_daily_volume, common_max_daily_volume_ec))};
            if (!common_max_daily_volume_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure max_daily_volume member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_max_daily_volume = "max_daily_volume";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_max_daily_volume;
            ann_custom_RiskParameters.reset();
            CompleteMemberDetail detail_max_daily_volume = TypeObjectUtils::build_complete_member_detail(name_max_daily_volume, member_ann_builtin_max_daily_volume, ann_custom_RiskParameters);
            CompleteStructMember member_max_daily_volume = TypeObjectUtils::build_complete_struct_member(common_max_daily_volume, detail_max_daily_volume);
            TypeObjectUtils::add_complete_struct_member(member_seq_RiskParameters, member_max_daily_volume);
        }
        {
            TypeIdentifierPair type_ids_max_order_value;
            ReturnCode_t return_code_max_order_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_max_order_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_max_order_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_max_order_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "max_order_value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_max_order_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_max_order_value = 0x00000002;
            bool common_max_order_value_ec {false};
            CommonStructMember common_max_order_value {TypeObjectUtils::build_common_struct_member(member_id_max_order_value, member_flags_max_order_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_max_order_value, common_max_order_value_ec))};
            if (!common_max_order_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure max_order_value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_max_order_value = "max_order_value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_max_order_value;
            ann_custom_RiskParameters.reset();
            CompleteMemberDetail detail_max_order_value = TypeObjectUtils::build_complete_member_detail(name_max_order_value, member_ann_builtin_max_order_value, ann_custom_RiskParameters);
            CompleteStructMember member_max_order_value = TypeObjectUtils::build_complete_struct_member(common_max_order_value, detail_max_order_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_RiskParameters, member_max_order_value);
        }
        {
            TypeIdentifierPair type_ids_is_symbol_enabled;
            ReturnCode_t return_code_is_symbol_enabled {eprosima::fastdds::dds::RETCODE_OK};
            return_code_is_symbol_enabled =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_is_symbol_enabled);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_is_symbol_enabled)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "is_symbol_enabled Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_is_symbol_enabled = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_is_symbol_enabled = 0x00000003;
            bool common_is_symbol_enabled_ec {false};
            CommonStructMember common_is_symbol_enabled {TypeObjectUtils::build_common_struct_member(member_id_is_symbol_enabled, member_flags_is_symbol_enabled, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_is_symbol_enabled, common_is_symbol_enabled_ec))};
            if (!common_is_symbol_enabled_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure is_symbol_enabled member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_is_symbol_enabled = "is_symbol_enabled";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_is_symbol_enabled;
            ann_custom_RiskParameters.reset();
            CompleteMemberDetail detail_is_symbol_enabled = TypeObjectUtils::build_complete_member_detail(name_is_symbol_enabled, member_ann_builtin_is_symbol_enabled, ann_custom_RiskParameters);
            CompleteStructMember member_is_symbol_enabled = TypeObjectUtils::build_complete_struct_member(common_is_symbol_enabled, detail_is_symbol_enabled);
            TypeObjectUtils::add_complete_struct_member(member_seq_RiskParameters, member_is_symbol_enabled);
        }
        {
            TypeIdentifierPair type_ids_margin_requirement;
            ReturnCode_t return_code_margin_requirement {eprosima::fastdds::dds::RETCODE_OK};
            return_code_margin_requirement =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_margin_requirement);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_margin_requirement)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "margin_requirement Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_margin_requirement = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_margin_requirement = 0x00000004;
            bool common_margin_requirement_ec {false};
            CommonStructMember common_margin_requirement {TypeObjectUtils::build_common_struct_member(member_id_margin_requirement, member_flags_margin_requirement, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_margin_requirement, common_margin_requirement_ec))};
            if (!common_margin_requirement_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure margin_requirement member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_margin_requirement = "margin_requirement";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_margin_requirement;
            ann_custom_RiskParameters.reset();
            CompleteMemberDetail detail_margin_requirement = TypeObjectUtils::build_complete_member_detail(name_margin_requirement, member_ann_builtin_margin_requirement, ann_custom_RiskParameters);
            CompleteStructMember member_margin_requirement = TypeObjectUtils::build_complete_struct_member(common_margin_requirement, detail_margin_requirement);
            TypeObjectUtils::add_complete_struct_member(member_seq_RiskParameters, member_margin_requirement);
        }
        CompleteStructType struct_type_RiskParameters = TypeObjectUtils::build_complete_struct_type(struct_flags_RiskParameters, header_RiskParameters, member_seq_RiskParameters);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_RiskParameters, type_name_RiskParameters.to_string(), type_ids_RiskParameters))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "RiskParameters already registered in TypeObjectRegistry for a different type.");
        }
    }
}
