// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OrderMessage.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__ORDERMESSAGE_HPP
#define FAST_DDS_GENERATED__ORDERMESSAGE_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ORDERMESSAGE_SOURCE)
#define ORDERMESSAGE_DllAPI __declspec( dllexport )
#else
#define ORDERMESSAGE_DllAPI __declspec( dllimport )
#endif // ORDERMESSAGE_SOURCE
#else
#define ORDERMESSAGE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ORDERMESSAGE_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the enumeration OrderSide defined by the user in the IDL file.
 * @ingroup OrderMessage
 */
enum class OrderSide : int32_t
{
    BUY,
    SELL
};
/*!
 * @brief This class represents the enumeration OrderType defined by the user in the IDL file.
 * @ingroup OrderMessage
 */
enum class OrderType : int32_t
{
    MARKET,
    LIMIT,
    STOP,
    STOP_LIMIT
};
/*!
 * @brief This class represents the enumeration OrderStatus defined by the user in the IDL file.
 * @ingroup OrderMessage
 */
enum class OrderStatus : int32_t
{
    NEW,
    VALIDATED,
    REJECTED,
    ROUTED,
    FILLED,
    CANCELLED
};
/*!
 * @brief This class represents the structure OrderRequest defined by the user in the IDL file.
 * @ingroup OrderMessage
 */
class OrderRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OrderRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OrderRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OrderRequest that will be copied.
     */
    eProsima_user_DllExport OrderRequest(
            const OrderRequest& x)
    {
                    m_client_id = x.m_client_id;

                    m_order_id = x.m_order_id;

                    m_symbol = x.m_symbol;

                    m_side = x.m_side;

                    m_type = x.m_type;

                    m_quantity = x.m_quantity;

                    m_price = x.m_price;

                    m_stop_price = x.m_stop_price;

                    m_timestamp = x.m_timestamp;

                    m_user_id = x.m_user_id;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OrderRequest that will be copied.
     */
    eProsima_user_DllExport OrderRequest(
            OrderRequest&& x) noexcept
    {
        m_client_id = std::move(x.m_client_id);
        m_order_id = std::move(x.m_order_id);
        m_symbol = std::move(x.m_symbol);
        m_side = x.m_side;
        m_type = x.m_type;
        m_quantity = x.m_quantity;
        m_price = x.m_price;
        m_stop_price = x.m_stop_price;
        m_timestamp = x.m_timestamp;
        m_user_id = std::move(x.m_user_id);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OrderRequest that will be copied.
     */
    eProsima_user_DllExport OrderRequest& operator =(
            const OrderRequest& x)
    {

                    m_client_id = x.m_client_id;

                    m_order_id = x.m_order_id;

                    m_symbol = x.m_symbol;

                    m_side = x.m_side;

                    m_type = x.m_type;

                    m_quantity = x.m_quantity;

                    m_price = x.m_price;

                    m_stop_price = x.m_stop_price;

                    m_timestamp = x.m_timestamp;

                    m_user_id = x.m_user_id;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OrderRequest that will be copied.
     */
    eProsima_user_DllExport OrderRequest& operator =(
            OrderRequest&& x) noexcept
    {

        m_client_id = std::move(x.m_client_id);
        m_order_id = std::move(x.m_order_id);
        m_symbol = std::move(x.m_symbol);
        m_side = x.m_side;
        m_type = x.m_type;
        m_quantity = x.m_quantity;
        m_price = x.m_price;
        m_stop_price = x.m_stop_price;
        m_timestamp = x.m_timestamp;
        m_user_id = std::move(x.m_user_id);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OrderRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OrderRequest& x) const
    {
        return (m_client_id == x.m_client_id &&
           m_order_id == x.m_order_id &&
           m_symbol == x.m_symbol &&
           m_side == x.m_side &&
           m_type == x.m_type &&
           m_quantity == x.m_quantity &&
           m_price == x.m_price &&
           m_stop_price == x.m_stop_price &&
           m_timestamp == x.m_timestamp &&
           m_user_id == x.m_user_id);
    }

    /*!
     * @brief Comparison operator.
     * @param x OrderRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OrderRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member client_id
     * @param _client_id New value to be copied in member client_id
     */
    eProsima_user_DllExport void client_id(
            const std::string& _client_id)
    {
        m_client_id = _client_id;
    }

    /*!
     * @brief This function moves the value in member client_id
     * @param _client_id New value to be moved in member client_id
     */
    eProsima_user_DllExport void client_id(
            std::string&& _client_id)
    {
        m_client_id = std::move(_client_id);
    }

    /*!
     * @brief This function returns a constant reference to member client_id
     * @return Constant reference to member client_id
     */
    eProsima_user_DllExport const std::string& client_id() const
    {
        return m_client_id;
    }

    /*!
     * @brief This function returns a reference to member client_id
     * @return Reference to member client_id
     */
    eProsima_user_DllExport std::string& client_id()
    {
        return m_client_id;
    }


    /*!
     * @brief This function copies the value in member order_id
     * @param _order_id New value to be copied in member order_id
     */
    eProsima_user_DllExport void order_id(
            const std::string& _order_id)
    {
        m_order_id = _order_id;
    }

    /*!
     * @brief This function moves the value in member order_id
     * @param _order_id New value to be moved in member order_id
     */
    eProsima_user_DllExport void order_id(
            std::string&& _order_id)
    {
        m_order_id = std::move(_order_id);
    }

    /*!
     * @brief This function returns a constant reference to member order_id
     * @return Constant reference to member order_id
     */
    eProsima_user_DllExport const std::string& order_id() const
    {
        return m_order_id;
    }

    /*!
     * @brief This function returns a reference to member order_id
     * @return Reference to member order_id
     */
    eProsima_user_DllExport std::string& order_id()
    {
        return m_order_id;
    }


    /*!
     * @brief This function copies the value in member symbol
     * @param _symbol New value to be copied in member symbol
     */
    eProsima_user_DllExport void symbol(
            const std::string& _symbol)
    {
        m_symbol = _symbol;
    }

    /*!
     * @brief This function moves the value in member symbol
     * @param _symbol New value to be moved in member symbol
     */
    eProsima_user_DllExport void symbol(
            std::string&& _symbol)
    {
        m_symbol = std::move(_symbol);
    }

    /*!
     * @brief This function returns a constant reference to member symbol
     * @return Constant reference to member symbol
     */
    eProsima_user_DllExport const std::string& symbol() const
    {
        return m_symbol;
    }

    /*!
     * @brief This function returns a reference to member symbol
     * @return Reference to member symbol
     */
    eProsima_user_DllExport std::string& symbol()
    {
        return m_symbol;
    }


    /*!
     * @brief This function sets a value in member side
     * @param _side New value for member side
     */
    eProsima_user_DllExport void side(
            OrderSide _side)
    {
        m_side = _side;
    }

    /*!
     * @brief This function returns the value of member side
     * @return Value of member side
     */
    eProsima_user_DllExport OrderSide side() const
    {
        return m_side;
    }

    /*!
     * @brief This function returns a reference to member side
     * @return Reference to member side
     */
    eProsima_user_DllExport OrderSide& side()
    {
        return m_side;
    }


    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    eProsima_user_DllExport void type(
            OrderType _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    eProsima_user_DllExport OrderType type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport OrderType& type()
    {
        return m_type;
    }


    /*!
     * @brief This function sets a value in member quantity
     * @param _quantity New value for member quantity
     */
    eProsima_user_DllExport void quantity(
            double _quantity)
    {
        m_quantity = _quantity;
    }

    /*!
     * @brief This function returns the value of member quantity
     * @return Value of member quantity
     */
    eProsima_user_DllExport double quantity() const
    {
        return m_quantity;
    }

    /*!
     * @brief This function returns a reference to member quantity
     * @return Reference to member quantity
     */
    eProsima_user_DllExport double& quantity()
    {
        return m_quantity;
    }


    /*!
     * @brief This function sets a value in member price
     * @param _price New value for member price
     */
    eProsima_user_DllExport void price(
            double _price)
    {
        m_price = _price;
    }

    /*!
     * @brief This function returns the value of member price
     * @return Value of member price
     */
    eProsima_user_DllExport double price() const
    {
        return m_price;
    }

    /*!
     * @brief This function returns a reference to member price
     * @return Reference to member price
     */
    eProsima_user_DllExport double& price()
    {
        return m_price;
    }


    /*!
     * @brief This function sets a value in member stop_price
     * @param _stop_price New value for member stop_price
     */
    eProsima_user_DllExport void stop_price(
            double _stop_price)
    {
        m_stop_price = _stop_price;
    }

    /*!
     * @brief This function returns the value of member stop_price
     * @return Value of member stop_price
     */
    eProsima_user_DllExport double stop_price() const
    {
        return m_stop_price;
    }

    /*!
     * @brief This function returns a reference to member stop_price
     * @return Reference to member stop_price
     */
    eProsima_user_DllExport double& stop_price()
    {
        return m_stop_price;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            int64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport int64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport int64_t& timestamp()
    {
        return m_timestamp;
    }


    /*!
     * @brief This function copies the value in member user_id
     * @param _user_id New value to be copied in member user_id
     */
    eProsima_user_DllExport void user_id(
            const std::string& _user_id)
    {
        m_user_id = _user_id;
    }

    /*!
     * @brief This function moves the value in member user_id
     * @param _user_id New value to be moved in member user_id
     */
    eProsima_user_DllExport void user_id(
            std::string&& _user_id)
    {
        m_user_id = std::move(_user_id);
    }

    /*!
     * @brief This function returns a constant reference to member user_id
     * @return Constant reference to member user_id
     */
    eProsima_user_DllExport const std::string& user_id() const
    {
        return m_user_id;
    }

    /*!
     * @brief This function returns a reference to member user_id
     * @return Reference to member user_id
     */
    eProsima_user_DllExport std::string& user_id()
    {
        return m_user_id;
    }



private:

    std::string m_client_id;
    std::string m_order_id;
    std::string m_symbol;
    OrderSide m_side{OrderSide::BUY};
    OrderType m_type{OrderType::MARKET};
    double m_quantity{0.0};
    double m_price{0.0};
    double m_stop_price{0.0};
    int64_t m_timestamp{0};
    std::string m_user_id;

};
/*!
 * @brief This class represents the structure OrderResponse defined by the user in the IDL file.
 * @ingroup OrderMessage
 */
class OrderResponse
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OrderResponse()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OrderResponse()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OrderResponse that will be copied.
     */
    eProsima_user_DllExport OrderResponse(
            const OrderResponse& x)
    {
                    m_order_id = x.m_order_id;

                    m_status = x.m_status;

                    m_message = x.m_message;

                    m_timestamp = x.m_timestamp;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OrderResponse that will be copied.
     */
    eProsima_user_DllExport OrderResponse(
            OrderResponse&& x) noexcept
    {
        m_order_id = std::move(x.m_order_id);
        m_status = x.m_status;
        m_message = std::move(x.m_message);
        m_timestamp = x.m_timestamp;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OrderResponse that will be copied.
     */
    eProsima_user_DllExport OrderResponse& operator =(
            const OrderResponse& x)
    {

                    m_order_id = x.m_order_id;

                    m_status = x.m_status;

                    m_message = x.m_message;

                    m_timestamp = x.m_timestamp;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OrderResponse that will be copied.
     */
    eProsima_user_DllExport OrderResponse& operator =(
            OrderResponse&& x) noexcept
    {

        m_order_id = std::move(x.m_order_id);
        m_status = x.m_status;
        m_message = std::move(x.m_message);
        m_timestamp = x.m_timestamp;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OrderResponse object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OrderResponse& x) const
    {
        return (m_order_id == x.m_order_id &&
           m_status == x.m_status &&
           m_message == x.m_message &&
           m_timestamp == x.m_timestamp);
    }

    /*!
     * @brief Comparison operator.
     * @param x OrderResponse object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OrderResponse& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member order_id
     * @param _order_id New value to be copied in member order_id
     */
    eProsima_user_DllExport void order_id(
            const std::string& _order_id)
    {
        m_order_id = _order_id;
    }

    /*!
     * @brief This function moves the value in member order_id
     * @param _order_id New value to be moved in member order_id
     */
    eProsima_user_DllExport void order_id(
            std::string&& _order_id)
    {
        m_order_id = std::move(_order_id);
    }

    /*!
     * @brief This function returns a constant reference to member order_id
     * @return Constant reference to member order_id
     */
    eProsima_user_DllExport const std::string& order_id() const
    {
        return m_order_id;
    }

    /*!
     * @brief This function returns a reference to member order_id
     * @return Reference to member order_id
     */
    eProsima_user_DllExport std::string& order_id()
    {
        return m_order_id;
    }


    /*!
     * @brief This function sets a value in member status
     * @param _status New value for member status
     */
    eProsima_user_DllExport void status(
            OrderStatus _status)
    {
        m_status = _status;
    }

    /*!
     * @brief This function returns the value of member status
     * @return Value of member status
     */
    eProsima_user_DllExport OrderStatus status() const
    {
        return m_status;
    }

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport OrderStatus& status()
    {
        return m_status;
    }


    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message)
    {
        m_message = _message;
    }

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message)
    {
        m_message = std::move(_message);
    }

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const
    {
        return m_message;
    }

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message()
    {
        return m_message;
    }


    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            int64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport int64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport int64_t& timestamp()
    {
        return m_timestamp;
    }



private:

    std::string m_order_id;
    OrderStatus m_status{OrderStatus::NEW};
    std::string m_message;
    int64_t m_timestamp{0};

};
/*!
 * @brief This class represents the structure RiskParameters defined by the user in the IDL file.
 * @ingroup OrderMessage
 */
class RiskParameters
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RiskParameters()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RiskParameters()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RiskParameters that will be copied.
     */
    eProsima_user_DllExport RiskParameters(
            const RiskParameters& x)
    {
                    m_max_position_size = x.m_max_position_size;

                    m_max_daily_volume = x.m_max_daily_volume;

                    m_max_order_value = x.m_max_order_value;

                    m_is_symbol_enabled = x.m_is_symbol_enabled;

                    m_margin_requirement = x.m_margin_requirement;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RiskParameters that will be copied.
     */
    eProsima_user_DllExport RiskParameters(
            RiskParameters&& x) noexcept
    {
        m_max_position_size = x.m_max_position_size;
        m_max_daily_volume = x.m_max_daily_volume;
        m_max_order_value = x.m_max_order_value;
        m_is_symbol_enabled = x.m_is_symbol_enabled;
        m_margin_requirement = x.m_margin_requirement;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RiskParameters that will be copied.
     */
    eProsima_user_DllExport RiskParameters& operator =(
            const RiskParameters& x)
    {

                    m_max_position_size = x.m_max_position_size;

                    m_max_daily_volume = x.m_max_daily_volume;

                    m_max_order_value = x.m_max_order_value;

                    m_is_symbol_enabled = x.m_is_symbol_enabled;

                    m_margin_requirement = x.m_margin_requirement;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RiskParameters that will be copied.
     */
    eProsima_user_DllExport RiskParameters& operator =(
            RiskParameters&& x) noexcept
    {

        m_max_position_size = x.m_max_position_size;
        m_max_daily_volume = x.m_max_daily_volume;
        m_max_order_value = x.m_max_order_value;
        m_is_symbol_enabled = x.m_is_symbol_enabled;
        m_margin_requirement = x.m_margin_requirement;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x RiskParameters object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const RiskParameters& x) const
    {
        return (m_max_position_size == x.m_max_position_size &&
           m_max_daily_volume == x.m_max_daily_volume &&
           m_max_order_value == x.m_max_order_value &&
           m_is_symbol_enabled == x.m_is_symbol_enabled &&
           m_margin_requirement == x.m_margin_requirement);
    }

    /*!
     * @brief Comparison operator.
     * @param x RiskParameters object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const RiskParameters& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member max_position_size
     * @param _max_position_size New value for member max_position_size
     */
    eProsima_user_DllExport void max_position_size(
            double _max_position_size)
    {
        m_max_position_size = _max_position_size;
    }

    /*!
     * @brief This function returns the value of member max_position_size
     * @return Value of member max_position_size
     */
    eProsima_user_DllExport double max_position_size() const
    {
        return m_max_position_size;
    }

    /*!
     * @brief This function returns a reference to member max_position_size
     * @return Reference to member max_position_size
     */
    eProsima_user_DllExport double& max_position_size()
    {
        return m_max_position_size;
    }


    /*!
     * @brief This function sets a value in member max_daily_volume
     * @param _max_daily_volume New value for member max_daily_volume
     */
    eProsima_user_DllExport void max_daily_volume(
            double _max_daily_volume)
    {
        m_max_daily_volume = _max_daily_volume;
    }

    /*!
     * @brief This function returns the value of member max_daily_volume
     * @return Value of member max_daily_volume
     */
    eProsima_user_DllExport double max_daily_volume() const
    {
        return m_max_daily_volume;
    }

    /*!
     * @brief This function returns a reference to member max_daily_volume
     * @return Reference to member max_daily_volume
     */
    eProsima_user_DllExport double& max_daily_volume()
    {
        return m_max_daily_volume;
    }


    /*!
     * @brief This function sets a value in member max_order_value
     * @param _max_order_value New value for member max_order_value
     */
    eProsima_user_DllExport void max_order_value(
            double _max_order_value)
    {
        m_max_order_value = _max_order_value;
    }

    /*!
     * @brief This function returns the value of member max_order_value
     * @return Value of member max_order_value
     */
    eProsima_user_DllExport double max_order_value() const
    {
        return m_max_order_value;
    }

    /*!
     * @brief This function returns a reference to member max_order_value
     * @return Reference to member max_order_value
     */
    eProsima_user_DllExport double& max_order_value()
    {
        return m_max_order_value;
    }


    /*!
     * @brief This function sets a value in member is_symbol_enabled
     * @param _is_symbol_enabled New value for member is_symbol_enabled
     */
    eProsima_user_DllExport void is_symbol_enabled(
            bool _is_symbol_enabled)
    {
        m_is_symbol_enabled = _is_symbol_enabled;
    }

    /*!
     * @brief This function returns the value of member is_symbol_enabled
     * @return Value of member is_symbol_enabled
     */
    eProsima_user_DllExport bool is_symbol_enabled() const
    {
        return m_is_symbol_enabled;
    }

    /*!
     * @brief This function returns a reference to member is_symbol_enabled
     * @return Reference to member is_symbol_enabled
     */
    eProsima_user_DllExport bool& is_symbol_enabled()
    {
        return m_is_symbol_enabled;
    }


    /*!
     * @brief This function sets a value in member margin_requirement
     * @param _margin_requirement New value for member margin_requirement
     */
    eProsima_user_DllExport void margin_requirement(
            double _margin_requirement)
    {
        m_margin_requirement = _margin_requirement;
    }

    /*!
     * @brief This function returns the value of member margin_requirement
     * @return Value of member margin_requirement
     */
    eProsima_user_DllExport double margin_requirement() const
    {
        return m_margin_requirement;
    }

    /*!
     * @brief This function returns a reference to member margin_requirement
     * @return Reference to member margin_requirement
     */
    eProsima_user_DllExport double& margin_requirement()
    {
        return m_margin_requirement;
    }



private:

    double m_max_position_size{0.0};
    double m_max_daily_volume{0.0};
    double m_max_order_value{0.0};
    bool m_is_symbol_enabled{false};
    double m_margin_requirement{0.0};

};

#endif // _FAST_DDS_GENERATED_ORDERMESSAGE_HPP_


